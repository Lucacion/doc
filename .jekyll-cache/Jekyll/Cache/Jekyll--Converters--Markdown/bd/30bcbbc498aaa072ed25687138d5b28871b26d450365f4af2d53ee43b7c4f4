I"—6<h1 id="contabilidad-para-necios-">Contabilidad para Necios ¬Æ</h1>

<p>Contabilidad para Necios ¬Æ es un m√©todo pr√°ctico patentado por alectrico ¬Æ para que personas muy persistentes aprendan contabilidad. El m√©todo est√°  basado en inteligencia artificial.</p>

<p><img src="/revisado.png" alt="" /></p>

<blockquote>
  <p>Si no puede conseguir la ayuda de un contador y puede vivir unos tres meses encerrado con su computador, entonces esto es para Ud.!
En el caso contrario: si puede contar con un buen contador, entonces valore con calma el abandono del m√©todo en este punto, pues es problable que solo le represente una p√©rdida de tiempo.</p>
</blockquote>

<p>La contabilidad es un m√©todo creado en la Edad Media por el Gran Matem√°tico Luca Pacioli para mantener ordenados los movimientos de dinero y otros recursos financieros.</p>
<blockquote>
  <p>Para avanzar r√°pido, pues el contenido es muy denso y detallado, no nos detendremos mucho en datos hist√≥ricos ni conceptos financieros complicados. Los conceptos iniciales deben ser revisados m√°s adelante, pues no son completamente ciertos porque los presentar√© incompletos para conseguir que Ud. avance r√°pido hacia el trabajo pr√°ctico.</p>
</blockquote>

<h2 id="moviendo-el-dinero">Moviendo el dinero</h2>

<p>Alguna vez habr√° observado c√≥mo las monedas y los billetes se mueven desde las manos de unos a las manos de otros. Coincidentemente habr√° ocasi√≥n en que el movimiento del dinero en un sentido se acompa√±ar√° de movimientos de mercanc√≠as en sentido contrario.</p>

<p>Para mover el dinero en la actualidad se usan c√≥digos de computador. Es por eso que necesito de su atenci√≥n hacia la programaci√≥n de computadores, pues la usaremos constantemente para obtener la contabilidad de una empresa de ejemplo.</p>

<h3 id="c√≥digos-de-computadores-que-mueven-dinero">C√≥digos de Computadores que Mueven Dinero</h3>

<p>Observe el c√≥digo de computador que le muestro en un rect√°ngulo sombreado:</p>

<p>Este c√≥digo no lo usaremos, pero es instructivo mirarlo sin comprometerse a usarlo.</p>

<p>Observe que hay palabras coloreadas con colores diferentes. Esto sirve para diferenciar las diferentes estructuras de este lenguaje de computador. La forma de escribir un lenguaje es importante y algo de ello Ud. tendr√° que aprender, adem√°s de la contabilidad que promet√≠ ense√±arle.</p>

<p>La estructura que comienza con la palabra <strong>def</strong> y que termina con la palabra <strong>end</strong>, es un procedimiento o funci√≥n. La palabra encerrada entre par√©ntesis (circuito) es el argumento de la funci√≥n ‚Äúhay_sobrecalenamiento?‚Äù.</p>

<p>Si nota m√°s abajo, hay una l√≠nea que dice  <strong>hay_sobrecalentamiento?(‚ÄòEnchufes‚Äô)</strong>, esa l√≠nea sirve para activar a la funci√≥n pas√°ndole el argumento ‚ÄòEnchufes‚Äô. Con ello la funci√≥n har√° algo con el argumento ‚ÄòEnchufes‚Äô. Si mira entre def y end, ver√° que lo que se har√° es un <strong>puts</strong> el que imprimir√° en la pantalla <strong>Hay sobrecalentamiento en circuito, Enchufes</strong>.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">hay_sobrecalentamiento?</span><span class="p">(</span><span class="n">circuito</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hay sobrecalentamiento en circuito, </span><span class="si">#{</span><span class="n">circuito</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">hay_sobrecalentamiento?</span><span class="p">(</span><span class="s1">'Enchufes'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hay sobrecalentamiento en circuito, Enchufes' to STDOUT.</span></code></pre></figure>

<p>Para hacer la contabilidad usaremos otro tipo de programaci√≥n m√°s auton√≥ma que se denomina expert system. En el √°rea sombreada siguiente muestro un tipo de procedimiento que es llamado regla. Este lenguaje es muy diferente del que describ√≠ anteriormente, ac√° no hay que llamar directamente a los procedimientos (o reglas) sino que los procedimientos (o reglas) est√°n todo el tiempo pendientes de activarse por s√≠ mismos. De tal forma que Ud. podr√° concentrarse en escribir buenas reglas.</p>

<p>La reglas que est√° siendo mostrada se llama cargar-cuenta-nueva, esta regla se activa cuando ocurren cosas llamadas hechos. Al activarse esta regla esperamos que se cargue una cuenta nueva. O no?</p>

<p>Haremos una versi√≥n muy simplificada de esta regla que solo cargue una cuenta cualquiera y esto nos permitir√° adentrarnos en la contabilidad.</p>

<pre><code class="language-CLIPS">(defrule cargar-cuenta-nueva
   ( declare (salience 9800))
   ( empresa (nombre ?empresa))
   ( balance (mes ?mes_top) (dia ?top) (ano ?ano_top) )
   ( partida (dia ?dia) (mes ?mes) (ano ?ano) (numero ?numero))
   ?cargo &lt;-  (cargo (recibida ?recibida) (activo-fijo ?activo-fijo) (tipo-de-documento ?tipo-de-documento) (partida ?numero) (realizado false) (empresa ?empresa) (dia ?dia) (mes ?mes) (ano ?ano) (cuenta ?nombre) (monto ?monto) (glosa ?glosa) )
   ?cuenta &lt;- (cuenta (partida nil) (dia nil) (mes nil) (ano nil) (nombre ?nombre ) (tipo ?tipo) (grupo ?grupo) (padre ?padre) (circulante ?circulante) (naturaleza ?naturaleza) (descripcion ?descripcion) (origen ?origen))
   ( test (&gt;= (to_serial_date ?top ?mes_top ?ano_top) (to_serial_date ?dia ?mes ?ano)))
  =&gt;
   ( assert (cuenta (tipo-de-documento ?tipo-de-documento) (partida ?numero) (descripcion ?descripcion) (dia ?dia) (mes ?mes) (ano ?ano) (nombre ?nombre) (grupo ?grupo) (empresa ?empresa) (padre ?padre) (circulante ?circulante) (naturaleza ?naturaleza) (tipo ?tipo) (origen ?origen)))
;  ( printout t "n--&gt;" tab ?nombre tab ?dia " de " ?mes tab ?glosa crlf)
)
</code></pre>
<h3 id="regla-de-cargo">Regla de cargo</h3>

<figure class="highlight"><pre><code class="language-clips" data-lang="clips">(defrule cargar-cuenta-existente
   ?cargo &lt;- (cargo (monto ?monto) )
   ?cuenta &lt;- (cuenta (nombre ?nombre) (debe ?debe) (haber ?haber)  )
  =&gt;
   ( modify ?cuenta (debe ( round (+ ?debe ?monto)) ))
   ( modify ?cargo  (realizado true))
   ( printout t "c--&gt;" tab ?monto tab "|" tab 0 tab ?nombre crlf)
)</code></pre></figure>

<p>Ok, ahora tenemos otra regla muy parecida a la anterior que es disparada por solo dos hechos:</p>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />cargo</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />cuenta</li>
</ul>

<p>Ud. debe buscar la forma de <em>generar</em> estos hechos y la regla har√° lo suyo cuando a ella le parezca oportuno.</p>

<p>Observe el signo  <strong>=&gt;</strong>. Este signo separa las dos partes de una regla. Las reglas solo tienen dos partes, genial no?.</p>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />LHS: (Left Hand Side) esto identica los hechos que quedan hacia el lado izuierdo del signo <strong>=&gt;</strong></li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />RHS: ( Right Hand Side) esto identifica a lo que queda en el lado derecho del signo <strong>=&gt;</strong></li>
</ul>

<p>En este punto la informaci√≥n que le hemos entregado permite definir lo que sigue:</p>

<ol>
  <li>Una regla se puede disparar</li>
  <li>Una regla se dispara si los hechos en su lado izquierdo est√°n activos</li>
  <li>Una regla al dispararse puede activar otras reglas, imprimir en archivos, mostrar en la pantalla, llamar a procedimientos y funciones del estilo antiguo de programar</li>
  <li>Una regla puede modificar hechos existentes, incluso los hechos que la hicieron disparar</li>
</ol>

<p>Si se hace bien, la regla sombreada ser√° activada cuando alguien quiera cargar la cuenta de nombre <strong>?nombre</strong> con el monto <strong>?monto</strong>.</p>

<p>En el lado derecho se v√©n dos procedimientos que modifican hechos:</p>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />cuenta</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />cargo</li>
</ul>

<p>Estos procedimientos no son reglas, sino procedimientos a la usanza antigua, que deben ser llamados directamente para que hagan lo que sea que tengan que hacer.</p>

<p>El primer procedimiento tiene el nombre <strong>modify</strong> y la forma de llamarlo directamente es escribirlo dentro de un par√©ntesis junto con los argumentos. Esta forma de escribir es muy particular de este expert system y probablemente le resulte un poco extra√±a al comienzo. Pero es algo tan simple como decidir hacerlo as√≠.</p>

<figure class="highlight"><pre><code class="language-clips" data-lang="clips">(defrule cargar-cuenta-existente
   ?cargo &lt;- (cargo (monto ?monto) )
   ?cuenta &lt;- (cuenta (nombre ?nombre) (debe ?debe) (haber ?haber)  )
  =&gt;
   ( modify ?cuenta (debe ( round (+ ?debe ?monto)) ))
   ( modify ?cargo  (realizado true))
   ( printout t "c--&gt;" tab ?monto tab "|" tab 0 tab ?nombre crlf)
)</code></pre></figure>

<p>Observe atentamente, aunque no lo entienda de momento, pero este modify modifica cosas en la cuenta identificada por el nombre <strong>?cuenta</strong>. A prop√≥sito, las plabras que comiencen con el signo <em>?</em> solo pueden ser nombres de otras cosas.</p>

<p><strong>?cuenta</strong> representa a la cuenta del lado izquierdo. Luego volveremos a ello. Pero ahora debe concentrarse en lo que hace modify.</p>

<p>Modify agrega el monto <strong>?monto</strong> al campo <strong>debe</strong> de la cuenta <strong>?cuenta</strong>.</p>

<p>Ahora puede ver el siguiente modify y notar√° que es m√°s simple, pues solamente cambia el campo <strong>realizado</strong> del hecho <strong>?cargo</strong>.</p>

<p>El hecho cargo debe estar en el lado izquierdo de la regla pues es ah√≠ donde los nombres se le asignan a las cosas. El hecho cargo representa una orden de cargar algo por un monto <strong>?monto</strong> y la regla deja claro que ha cumplido la orden colocando el campo <strong>realizado</strong> a true.</p>

<p>La regla puede mostrar cosas en la pantalla, guardarlas en un archivo en un computador o imprimirlas a una impresa de l√≠nea (ya casi no existen). Para ello usa la instrucci√≥n <strong>printout t</strong> y los textos y argumentos que le parezcan suficientemente ilustrativos para informar a los usuarios humanos.</p>

<p>Esta regla imprime un formato contable con un n√∫mero separado de otro n√∫mero por una barra vertical.</p>

<figure class="highlight"><pre><code class="language-clips" data-lang="clips">(defrule cargar-cuenta-existente
   ?cargo &lt;- (cargo (monto ?monto) )
   ?cuenta &lt;- (cuenta (nombre ?nombre) (debe ?debe) (haber ?haber)  )
  =&gt;
   ( modify ?cuenta (debe ( round (+ ?debe ?monto)) ))
   ( modify ?cargo  (realizado true))
   ( printout t "c--&gt;" tab ?monto tab "|" tab 0 tab ?nombre crlf)
)</code></pre></figure>

<h3 id="conocimiento-contable">Conocimiento Contable</h3>

<p>En este punto Ud. ya est√° en condiciones de extraer algunos conocimientos contables, a√∫n sin tener que ver el expert system funcionando con todo aquella parafernalia de procedimientos y reglas.</p>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Cargar una cuenta significa aumentar el campo <strong>debe</strong> de esa cuenta</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />El campo <strong>debe</strong> de una cuenta se coloca al lado izquierdo de una barra vertical</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Para cargar una cuenta hay que generar el hecho <strong>cargo</strong></li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Para cargar una cuenta esta debe existir previamente</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Las cuentas tienen, al menos dos campos:
    <ul class="task-list">
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />debe</li>
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />nombre</li>
    </ul>
  </li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />El dinero se puede mover en las transacciones mercantiles y su movimiento puede ser registrado en cuentas, como aquellas de los bancos</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Al igual que los bancos, Ud. puede mover dinero virtual entre cuentas de su empresa, pero siempre debe tener claro que el dinero debe existir para el resto del mercado financiero, sea en forma concreta o en sus representaciones virtuales. El t√©rminos contables se prefiere hablar de valores, derechos y deberes, donde el dinero es una de esas formas de existencia de los anteriores. No entrar√© en esos detalles aqu√≠.</li>
</ul>

<table>
  <tbody>
    <tr>
      <td><a href="/contabilidad/2021/09/05/bienvenido.html">bienvenido</a></td>
      <td><a href="/contabilidad/2021/09/06/cuentas.html">cuentas</a></td>
      <td><a href="/contabilidad/2021/09/07/cargo.html">cargo</a></td>
    </tr>
  </tbody>
</table>

:ET