---
layout: post
title: Cuentas
date: 2021-09-06
categories: contabilidad
---
# Las cuentas

Hola de nuevo, necesitará leer los posts previamente publicados si quiere entender bien este post. 

En este punto Ud. debiera tener una idea de que se necesita una regla para cargar una cuenta y que eso funciona más o menos en forma automática e inteligentemente, pues esto lo hace un expert system.

Ahora recordamos que la regla que se usa para cargar una cuenta tiene dos antecedentes, así se les llama a los hechos que están en el lado izquierdo del signo **=>**.

{defrule cargar
  (cargo)
  (cuenta)
 =>
  (modify (cuenta))
}

Los antecedentes de esa regla son:
- [x] (cargo)
- [X] (cuenta)


Sabemos que una cuenta debe tener una estructura tal que incopore un campo llamado **debe**, al cual se le sumarán los cargos.

Entonces una cuenta se debe declarar así:

{% highlight CLIPS %}

(deftemplate cuenta
   (slot debe (default 0))
)

{% endhighlight %}

En este expert system se prefiere llamar slot a los campos, pero hoy en día se acepta mejor llamarlos campos. No es un tema que nos interese mucho aquí, pues solo queremos ir rápido.

El antecedente **cargo** también es un hecho con estructura y considera dos campos al menos:
- [x] monto
- [x] realizado


{% highlight CLIPS %}

(deftemplate cargo
   (slot monto (default 0))
   (slot realizado (default false))
)

{% endhighlight %}

Esta estructuras no tendrán contenido a menos que Ud. se los asigne con una función assert, lo que se escribe así:


(assert (cargo (monto 100)))

Observe que los nombres de los procedimientos y de sus argumentos se colocan al interior de dos paréntesis, lo mismo ya sabe que pasa con los campos de un hecho.

No olvide usar una función **printout t** en el campo derecho de la regla para que nos diga lo que sucedió al momento de ejecutarse la regla.


Bueno ya hemos definido los hechos y la regla que será disparada por ellos, entonces que más hay que aprender?


Entonces: 

{% highlight CLIPS %}
(deftemplate cargo
   (slot monto (default 0))
   (slot realizado (default false))
)

(deftemplate cuenta
   (slot debe (default 0))
)

(defrule cargar-cuenta-existente
   ?cargo <- (cargo (monto ?monto) )
   ?cuenta <- (cuenta (nombre ?nombre) (debe ?debe) (haber ?haber)  )
  =>
   ( modify ?cuenta (debe ( round (+ ?debe ?monto)) ))
   ( modify ?cargo  (realizado true))
   ( printout t "c-->" tab ?monto tab "|" tab 0 tab ?nombre crlf)
)  

(assert (cargo (monto 100)))


{% endhighlight %}

Este es un borrador de lo que podría ser un expert system para cargar una regla.

El expert system toma el documento, lo carga en memoria y espera a que se digite reset y luego run. Los dos comandos son necesarios. 

- [x] Reset: Renicia los estados de los hechos
- [x] Run: Carga los hechos en memoria y procede a ofrecerlos a las reglas, la regla que primero haga match con un conjunto de hechos activos, se disparará.


Si Ud. corrige ese bosquejo obtendrá algo parecido a lo siguiente:

{% highlight CLIPS %}
Defining deftemplate: cargo
Defining deftemplate: cuenta
Defining defrule: cargar-cuenta-existente +j+j+j
Defining defrule: inicio +j+j
==> f-1     (cuenta (debe 0))
==> f-2     (cargo (monto 100) (realizado false))
<== f-1     (cuenta (debe 0))
==> f-3     (cuenta (debe 100))
<== f-2     (cargo (monto 100) (realizado false))
==> f-4     (cargo (monto 100) (realizado true))
c-->	100	|	0	
{% endhighlight %}

En el próximo post comentaré este resultado y publicaré la solución que yo encontré. Anímese si llegó a otro resultado, eso es parte de este método, Ud. construye su propio conocimiento!


[bienvenido](/contabilidad/2021/09/05/bienvenido.html)|[cargo](/contabilidad/2021/09/07/cargo.html)

