I"≥<h1 id="respuesta-a-ejercicio-de-abono">Respuesta a Ejercicio de Abono</h1>

<p>Este es el sistema que me funcion√≥ y que satisface la solicitud abonar una cuenta. Abonar significa aumentar algo en el lado derecho de una cuenta. Ese algo se llama <strong>haber</strong> en la jerga de los contadores. De ah√≠ que debamos modificar el deftemplate <strong>cuenta</strong> para que ahora incluya un slot denominado <strong>haber</strong>.</p>

<p>Adem√°s, para evitar que las reglas se vuelvan a disparar cada vez que la cuenta se modifique, se debe preveer que solo se atiendan las √≥rdenes de cargo y abono una sola vez. Esto se puede hacer colocando en el lado izquierdo de cada regla, el hecho de cargo (o el de abono cuando corresponda), con el valor de realizado en false.</p>

<p>Rev√≠selo con calma en su ambiente de Clips y modifique algunos detalles para que vea lo que ha de suceder.</p>

<p>Puede bajar el archivo con la respuesta aqu√≠:</p>

<p><a href="/micro-abono.clp">download respuesta</a></p>

<figure class="highlight"><pre><code class="language-clps" data-lang="clps">(deftemplate cargo
   (slot monto (default 0))
   (slot realizado (default false)))

(deftemplate abono
   (slot monto (default 0))
   (slot realizado (default false)))

(deftemplate cuenta
   (slot debe (default 0))
   (slot haber (default 0)))

(defrule cargar-cuenta-existente
   ?cargo  &lt;-  ( cargo (monto ?monto) (realizado false) )
   ?cuenta &lt;-  ( cuenta (debe ?debe)  )
  =&gt;
   ( modify ?cuenta (debe ( round (+ ?debe ?monto)) ))
   ( modify ?cargo  (realizado true))
   ( printout t "c--&gt;" tab ?monto tab "|" tab 0 tab crlf))

(defrule abonar-cuenta-existente
   ?abono  &lt;-  ( abono (monto ?monto) (realizado false) )
   ?cuenta &lt;-  ( cuenta (haber ?haber)  )
  =&gt;
   ( modify ?cuenta (haber ( round (+ ?haber ?monto)) ))
   ( modify ?abono (realizado true))
   ( printout t "a--&gt;" tab 0 tab "|" tab ?monto tab crlf))

(defrule inicio
  (declare (salience 10000))
  =&gt;
  ( watch facts)
  ( assert (cuenta (debe 0)))
  ( assert (cargo (monto 100)))
  ( assert (abono (monto 90))))
~                 </code></pre></figure>

<p>Al cargar micro-abono.clp y luego de llamar a (reset) y (run).
El ambiente de CLIPS debiese entregar informaci√≥n de apoyo como esta.</p>

<figure class="highlight"><pre><code class="language-clips" data-lang="clips">Defining deftemplate: cargo
Defining deftemplate: abono
Defining deftemplate: cuenta
Defining defrule: cargar-cuenta-existente +j+j+j
Defining defrule: abonar-cuenta-existente +j+j+j
Defining defrule: inicio +j+j
==&gt; f-1     (cuenta (debe 0) (haber 0))
==&gt; f-2     (cargo (monto 100) (realizado false))
==&gt; f-3     (abono (monto 90) (realizado false))
&lt;== f-1     (cuenta (debe 0) (haber 0))
==&gt; f-4     (cuenta (debe 0) (haber 90))
&lt;== f-3     (abono (monto 90) (realizado false))
==&gt; f-5     (abono (monto 90) (realizado true))
a--&gt;	0	|	90	
&lt;== f-4     (cuenta (debe 0) (haber 90))
==&gt; f-6     (cuenta (debe 100) (haber 90))
&lt;== f-2     (cargo (monto 100) (realizado false))
==&gt; f-7     (cargo (monto 100) (realizado true))
c--&gt;	100	|	0	                                     </code></pre></figure>

<h1 id="an√°lisis">An√°lisis</h1>

<p>Este tipo de an√°lisis ya UD. lo conoce, los <strong>deftemplate</strong> son las declaraciones de las estructuras de las ordenes para <strong>cargo</strong> y <strong>abono</strong>; y la de la <strong>cuenta</strong>. Los <strong>defrule</strong> son las declaraciones de c√≥mo Ud. ha definido las reglas de <strong>abono</strong> y de <strong>cargo</strong>, adem√°s de una regla <strong>inicio</strong> que se usa para entender como va el desarrollo del sistema. Los avisos <strong>f-1</strong>, <strong>f-2</strong> y otros de ese tipo, indican que se han cargado o bajado hechos a la memoria. As√≠ <strong>f-1</strong> es un hecho de que la cuenta se ha iniciado con <strong>debe</strong> y <strong>haber</strong> en cero. Luego se sube a memoria el hecho <strong>cargo</strong> que es la orden para cargar la <strong>cuenta</strong> y finalmente se sube a la memoria el hecho <strong>abono</strong> que es la orden que Ud. genera para abonar la cuenta.</p>

<p>En este momento el expert system ya se mueve por s√≠ solo, pues los hechos <strong>cargo</strong> y <strong>abono</strong> y las reglas <strong>cargar-cuenta-existente</strong> y <strong>abonar-cuenta-existente</strong> ya tienen lo suficiente como para interactuar entre ellos. Las interacciones en un expert system son esencialmente <em>matches</em> del lado izquierdo de la regla con los hechos que se hayan subido a la memoria.</p>

<p>Es presumible que la regla <strong>abonar-cuenta-existente</strong> haya sido la responsable por tomar el hecho <strong>f-1</strong> y convertirlo en el hecho <strong>f-4</strong>. Note que la diferencia entre ambos hecho es que el campo haber fue aumentado en 90. Tambi√©n ver√° que el hecho <strong>abono</strong> etiquetado por <strong>f-3</strong> pasa a ser el hecho <strong>f-5</strong> con su campo realizado en <strong>true</strong>. De esta forma no habr√° m√°s que un solo match de la regla <strong>abonar-cuenta-existente</strong> pues en su lado izquiero el hecho <strong>abono</strong> est√° obligado a hacer match cuando tenga su campo <strong>realizado</strong> en false.</p>

<p>Finalmente ver√° que hay un aviso <em>a‚Äì&gt;</em> que supuestamente debe haber sido generado por el comando <strong>(printout t )</strong> qu√© est√° en el lado derecho de la regla <em>abonar-cuenta-existente</em>.</p>

<p>A la vez que ocurre lo del abono, tambi√©n ocurre lo del cargo. En la salida sale uno despu√©s del otro, pero eso es solo porque la pantalla es una sola. Ud. ya lo habr√° visto en alg√∫n post anterior.</p>

<h1 id="conocimiento-contable">Conocimiento Contable</h1>

<p>En este momento Ud. ya debe haber aprendido que en contabilidad las cuentas tienen dos campos:</p>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />debe</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />haber</li>
</ul>

<p>Que esos dos campos pueden ser modificados a la suma (no hemos dicho nada de la resta a√∫n) y que los procesos para modificarlos tienen nombres diferentes y un tanto extra√±os.</p>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />abono</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />cargo</li>
</ul>

<p>Que en este momento, yo le puedo decir, que Luca Pacioli no se ha sumado al chat. As√≠ que puede agregar y quitar lo que quiera de la cuenta que quiera. Pero solo agregue. No elimine nada. O m√°s bien, v√©alo de esta forma, si abona es una suma y si carga es una resta. Pero de qu√©‚Ä¶.. Lo veremos m√°s adelante. No se quede de todas formas con esa mala idea!</p>

:ET